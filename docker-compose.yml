services:
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    env_file: "./.env"
    volumes:
      - ./data/mongo/:/data/db
      
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      
  hasura-mongo-connector:
    image: ghcr.io/hasura/ndc-mongodb:v1.6.0
    container_name: hasura-mongo-connector
    restart: always
    depends_on:
      - mongo:
        condition: service_healthy
      - postgres:
        condition: service_healthy
    ports:
      - "8100:8100"
    environment:
      MONGO_URL: "mongodb://root:${DATABASE_PASSWORD}@mongodb:27017"
      LOG_LEVEL: debug

  hasura:
    image: hasura/graphql-engine:latest
    container_name: hasura
    restart: always
    depends_on:
      - hasura-mongo-connector
      - postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: "postgres://postgres:${DATABASE_PASSWORD}@postgres:5432/postgres"
      HASURA_GRAPHQL_IN_MEMORY_METADATA: "true"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_PASSWORD}
    env_file: "./.env"

  indexer:
    image: snoop
    container_name: indexer
    depends_on:
      - mongo:
        condition: service_healthy
    command: >
      snoop
      --database "mongodb://root:${DATABASE_PASSWORD}@mongo"
      --rpc ${RPC_ENDPOINT}
      --batch-size ${BATCH_SIZE-50}
    restart: always
    env_file: "./.env"